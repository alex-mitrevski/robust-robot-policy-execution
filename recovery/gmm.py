"""
Implements a Gaussian Mixture Model (GMM) using the scikit-learn library.
Uses 40 data points of [x, y, z] coordinates to fit the GMM and sample from it.
The GMM is then used to sample a new [x, y, z] coordinate.

The code is used in the recovery pipeline to sample a new [x, y, z] coordinate from the GMM.

Dependencies:
- numpy
- scikit-learn

References:

- Scikit-learn GMM Documentation:
https://scikit-learn.org/0.15/modules/generated/sklearn.mixture.GMM.html

"""

import numpy as np
from sklearn.mixture import GaussianMixture
import matplotlib.pyplot as plt


def fitGMM(n_components=1):
    # Example data: Replace this with your actual list of [x, y, z] coordinates
    data = np.array(
        [
            [0.4875863194465637, -0.07694915682077408, 0.40829938650131226],
            [0.5202023983001709, -0.010548590682446957, 0.4127807021141052],
            [0.48758843541145325, -0.07694168388843536, 0.4083031415939331],
            [0.5321639180183411, -0.007614164613187313, 0.3799384832382202],
            [0.5075591206550598, 0.01947955973446369, 0.3881843090057373],
            [0.48759356141090393, -0.07693901658058167, 0.40829992294311523],
            [0.4875943064689636, -0.07695057988166809, 0.40831029415130615],
            [0.46654701232910156, -0.05334907025098801, 0.43480098247528076],
            [0.4430793225765228, -0.024354413151741028, 0.45647576451301575],
            [0.4875853657722473, -0.048676833510398865, 0.42411699891090393],
            [0.4860394299030304, -0.044789016246795654, 0.4351579546928406],
            [0.5077272653579712, -0.12176436185836792, 0.46425703167915344],
            [0.49376851320266724, -0.07168495655059814, 0.37675541639328003],
            [0.48714929819107056, -0.07744681090116501, 0.37276288866996765],
            [0.4551886022090912, -0.11961928009986877, 0.39220741391181946],
            [0.5036755204200745, -0.05797456577420235, 0.3825589120388031],
            [0.48770827054977417, -0.01859033666551113, 0.4126749634742737],
            [0.49448683857917786, -0.013103708624839783, 0.389177143573761],
            [0.47858762741088867, -0.07764623314142227, 0.41764551401138306],
            [0.35862627625465393, -0.11996307224035263, 0.4197002947330475],
            [0.4619711637496948, -0.08574885129928589, 0.41352054476737976],
            [0.49874696135520935, -0.07261267304420471, 0.385152131319046],
            [0.45402586460113525, -0.13055628538131714, 0.39200788736343384],
            [0.4875509738922119, -0.05653349682688713, 0.4012451171875],
            [0.4935554265975952, -0.0648050382733345, 0.3923773169517517],
            [0.45816531777381897, -0.11389985680580139, 0.4049327075481415],
            [0.48083287477493286, -0.07554681599140167, 0.43434154987335205],
            [0.48724785447120667, -0.054927758872509, 0.40245985984802246],
            [0.48758918046951294, -0.07693636417388916, 0.4082980453968048],
            [0.4875701069831848, -0.04708626866340637, 0.3938739597797394],
            [0.5182433724403381, -0.05991671606898308, 0.40828824043273926],
            [0.5279274582862854, -0.07330828160047531, 0.3803749084472656],
            [0.535123348236084, -0.03148461505770683, 0.40756258368492126],
            [0.5507801175117493, -0.07643004506826401, 0.4079557955265045],
            [0.5277227163314819, -0.048879627138376236, 0.4025251269340515],
            [0.516136646270752, -0.0694878026843071, 0.3954538404941559],
            [0.5224484205245972, -0.0504048652946949, 0.41484713554382324],
            [0.5167436599731445, -0.03977781906723976, 0.4100916385650635],
            [0.5093903541564941, -0.08930833637714386, 0.41687044501304626],
            [0.508404552936554, -0.0675877258181572, 0.3992435038089752],
        ]
    )

    # ROund the values in data to three decimal places
    data = np.round(data, 3)
    gmm = GaussianMixture(n_components=n_components)
    gmm.fit(data)
    return gmm


def sample_from_gmm(gmm, n_samples=2):
    samples = gmm.sample(n_samples)
    return samples


def main():
    n_components = 3
    gmm = fitGMM(n_components)
    n_samples = 1
    samples = sample_from_gmm(gmm, n_samples)
    print("Sampled [x, y, z] coordinate from the GMM:", samples[0][0])


if __name__ == "__main__":
    main()
